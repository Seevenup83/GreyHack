cryptools = include_lib("/lib/crypto.so")
if not cryptools then exit("Error: Missing crypto library")

if params.len == 0 or params.len > 1 or params[0] == "-h" or params[0] == "--help" then exit("<b>Usage: 7scan [ip address]</b>")	

printYellow = function(message)
  print("<color=yellow>" + message + "</color>")
end function

printRed = function(message)
  print("<color=red><b>" + message + "</b></color>")
end function

// nmap
if params.len != 1 then exit("<b>Usage: 7scan [ip address]</b>")	
if not is_valid_ip(params[0]) then exit("nmap: invalid ip address")
if not get_shell.host_computer.is_network_active then exit("nmap: No internet access.")
ipAddress = params[0]
clear_screen
print("checking IP: " + ipAddress)

printYellow("running nmap ...")

isLanIp = is_lan_ip( ipAddress )
if isLanIp then
   router = get_router;
else 
   router = get_router( ipAddress )
end if

if router == null then printRed("nmap: ip address not found")
ports = null

if not isLanIp then
   ports = router.used_ports
else
   ports = router.device_ports(ipAddress)
end if

if ports == null then printRed("nmap: ip address not found")
if typeof(ports) == "string" then exit(ports)
if(ports.len == 0) then printRed("nmap: No open ports found")

nmapInfo = ""
for port in ports
  service_info = router.port_info(port)
  lan_ips = port.get_lan_ip
  port_status = "open"

  if(port.is_closed and not isLanIp) then
     port_status = "closed"
  end if

  if nmapInfo == "" then
    nmapInfo = port.port_number + " " + port_status + " " + service_info + " " + lan_ips
  else
    nmapInfo = nmapInfo + "\n" + port.port_number + " " + port_status + " " + service_info + " " + lan_ips
  end if
end for
if nmapInfo != "" then print(format_columns(nmapInfo))

// scanrouter
printYellow("running scanrouter ...")
router = get_router( ipAddress )
if router == null then 
  printRed("scanrouter: ip address not found")
else
  version = router.kernel_version
  if not version then
	print("Warning: kernel_router.so not found")
  else 
	print("kernel_router.so : v" + version)
  end if

  firewall_rules = router.firewall_rules
  if typeof(firewall_rules) == "string" then printRed(firewall_rules)
  if firewall_rules.len == 0 then 
    print("No firewall rules found!")
  else
    scanInfo = "ACTION PORT SOURCE_IP DESTINATION_IP"
    for rules in firewall_rules
      scanInfo = scanInfo + "\n" + rules
    end for
    print(format_columns(scanInfo))
  end if
end if

//whois
printYellow("running whois ...")
if whois(ipAddress) == "Error: the IP address must be public" then
  printRed("whois: the IP address must be public")
else
  print(whois(ipAddress))
end if

// smtp_user_list
printYellow("running smtp_user_list ...")
users = cryptools.smtp_user_list(ipAddress, 25)
if(typeof(users) == "string") then printRed(users)

for user in users
  userPass = user.split(" ")
   print(userPass[0])
end for
