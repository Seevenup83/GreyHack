// 7memory (scan libs remote and get Buffer overflow string)
//if params.len != 2 then exit("<b>Usage: 7memory [ip-ipAddress] [port]")
ipAddress = params[0]
port = params[1].to_int
//ipAddress = "132.224.162.162"
//port = 22

metaxploit = include_lib("/lib/metaxploit.so"); if not metaxploit then exit("Error: Can't find /lib/metaxploit.so")
cryptools = include_lib("/lib/crypto.so"); if not cryptools then exit("Error: Can't find /lib/crypto.so")

GetPassword=function(userPass)
  if userPass.len != 2 then
    return null
  else
	password = cryptools.decipher(userPass[1])
	return password
end function

AccessPasswdFile = function(result)
	//print("Accesing to password file...")
	files = result.get_files
	for file in files
		if file.name == "passwd" then
			if not file.has_permission("r") then exit("Can't access /etc/passwd. Permission denied")
              print("decipher root password ...")
              print("")
              listUsers = file.get_content.split("\n")
              for line in listUsers
                userPass = line.split(":")
                if userPass[0] == "root" then
                  password = GetPassword(userPass)
                  if password then
                    print("user: " + userPass[0] + "\npassword: " + password)
                    localShell.launch("/bin/7ssh", "root@" + password + " " + ipAddress + " " + port)
                  end if
                end if
              end for
		end if
	end for
end function

print("<color=white>start scanning : " + ipAddress + " on port: " + port + " ...</color>")
localShell = get_shell
localComputer = localShell.host_computer
net_session = metaxploit.net_use(ipAddress, port)
metaLib = net_session.dump_lib
memoryZones = metaxploit.scan(metaLib)
for memoryZone in memoryZones
  unsafeChecks = metaxploit.scan_address(metaLib, memoryZone)
  for unsafeCheck in unsafeChecks.split("<b>")[1:unsafeChecks.len]
	bufferString = unsafeCheck.split("</b>")[0]
	result = metaLib.overflow(memoryZone, bufferString)
	if result and result != null then
      //print("DEBUG: " + typeof(result) + " -> " + result)
      if typeof(result) == "shell" then
//        result.start_terminal
        remoteComputer = result.host_computer
        file = remoteComputer.File("/etc/passwd")
        if not file.has_permission("r") then exit("Can't access /etc/passwd. Permission denied")
        print("decipher root password ...")
        print("")
        listUsers = file.get_content.split("\n")
        for line in listUsers
          userPass = line.split(":")
          if userPass[0] == "root" then
            password = GetPassword(userPass)
            if password then localShell.launch("/bin/7ssh", "root@" + password + " " + ipAddress + " " + port)
          end if
        end for
      end if
      //if typeof(result) == "number" then result.start_terminal //Password for user Enney modified OK.
      if typeof(result) == "file" then // /etc/passwd
	    if result.is_folder and result.path == "/etc" then
          AccessPasswdFile(result)
        else
          //print("Attempting to reach /etc folder...")
          while result.path != "/"
            result = result.parent
          end while
          folders = result.get_folders
          for folder in folders
            if folder.path == "/etc" then
              AccessPasswdFile(folder)
            end if
          end for
        end if
      end if
      if typeof(result) == "computer" then
        file = result.File("/etc/passwd")
        if not file then exit("Error: file /etc/passwd not found")
        if not file.has_permission("r") then exit("Error: can't read /etc/passwd. Permission denied.")
        if file.is_binary then exit("Error: invalid /etc/passwd file found.")
        listUsers = file.get_content.split("\n")
        for line in listUsers
        	userPass = line.split(":")
			if userPass[0] == "root" then
			  password = GetPassword(userPass)
              if password then localShell.launch("/bin/7ssh", "root@" + password + " " + ipAddress + " " + port)
            end if
        end for
	  end if
	else
	  return false
	end if
  end for
end for
