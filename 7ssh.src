// 7ssh: collects all passwd and Bank.txt informations on local computer
pathDownload = "/data/libs"
pathTemp = "/data"
// FUNCTIONS
GetPassword = function(userPass)
  if userPass.len != 2 then 
    return null
  else
	password = cryptools.decipher(userPass[1])
	return password
end function

printYellow = function(string)
  print("<color=yellow>" + string + "</color>")
end function

// LOAD LIBS
cryptools = include_lib("/lib/crypto.so")
if not cryptools then exit("Error: Missing crypto library")

// SSH
if params.len < 2 or params.len > 3 then exit("<b>Usage: 7ssh [user@password] [ip address] [(opt) port]</b>")
credentials = params[0].split("@")
remoteHost = params[1]
remoteUsr = credentials[0]
remotePas = credentials[1]
port = 22

if params.len == 3 then port = params[2].to_int
if typeof(port) != "number" then exit("Invalid port: " + port)
print("Connecting to: " + remoteHost + " ...")

localShell = get_shell
localComputer = localShell.host_computer

remoteShell = get_shell.connect_service(remoteHost, port, remoteUsr, remotePas)
remoteComputer = remoteShell.host_computer
if typeof(remoteShell) == "string" then exit(remoteShell)
if not remoteShell then exit("connection failed")

// PASSWD
printYellow("collecting passwd informations ...")
exportPath = "/home/" + active_user + "/Downloads"
exportFile = "passwd_" + remoteHost
exportFilePath = localComputer.File(exportPath + "/" + exportFile)
if not exportFilePath then localComputer.touch(exportPath, exportFile)
print("all collected informations will be stored in:\n" + exportPath + "/" + exportFile)

file = remoteShell.host_computer.File("/etc/passwd")
listUsers = file.get_content.split("\n")
content = ""
for line in listUsers
  userPass = line.split(":")
  password = GetPassword(userPass)
  if password then
    content = localComputer.File(exportPath + "/" + exportFile).get_content
    localComputer.File(exportPath + "/" + exportFile).set_content(content + char(10) + userPass[0] + ":" + password)
    print("user: " + userPass[0] + "\npassword: " + password)
  end if
end for




// BANK: crack and store information in single file
printYellow("collecting bank informations ...")
folder = remoteShell.host_computer.File("/home")
if not folder.has_permission("r") then
  print("permission denied: " + folder.name)
else
  homeFolders = folder.get_folders
  exportFile = "bank_informations"
  exportFilePath = localComputer.File(exportPath + "/" + exportFile)
  contentBank = ""

  print("all collected informations will be stored in: " + exportPath + "/" + exportFile)
  print("")
  for homeFolder in homeFolders
    file = remoteShell.host_computer.File("/home/" + homeFolder.name + "/Config/Bank.txt")
    if file != null then
      if not file then print("Error: file not found")
      if not file.has_permission("r") then print("Error: can't read. Permission denied.")
      if file.is_binary then print("Error: invalid file found.")

      listUsers = file.get_content.split("\n")
      for line in listUsers
        userPass = line.split(":")
	    password = GetPassword(userPass)
	    if password then 
          if not exportFilePath then
            localComputer.touch(exportPath, exportFile)
          else
            contentBank = localComputer.File(exportPath + "/" + exportFile).get_content
          end if
          localComputer.File(exportPath + "/" + exportFile).set_content(contentBank + char(10) + userPass[0] + ":" + password)
	      print("user: " + userPass[0] + "\npassword: " + password)
	    end if
      end for
    end if    
  end for
end if


// SCAN LIBs
printYellow("collecting /lib informations ...")

folderLib = remoteComputer.File("/lib")
if not folderLib.has_permission("r") then
  print("permission denied: " + folderLib.name)
else
  libFiles = folderLib.get_files
  metaxploit = include_lib("/lib/metaxploit.so")
  for libFile in libFiles
    
    libRemote = remoteComputer.File("/lib/" + libFile.name)
    remoteShell.scp(libRemote.path, pathTemp, localShell) // DOWNLOAD

    metaLib = metaxploit.load(pathTemp + "/" + libFile.name)
    libLocal = localComputer.File(pathTemp + "/" + libFile.name)
    localComputer.create_folder(pathDownload, metaLib.version)
    print("file saved: " + pathDownload + "/" + metaLib.version + "/" + libFile.name + "\n")
    libLocal.move(pathDownload + "/" + metaLib.version, libFile.name)
  end for
end if

// TBD: CLEANUP
printYellow("cleanup /var/system.log ...")
localShell.scp(pathTemp + "/system.log", "/var/", remoteShell) // DOWNLOAD

// EXIT
exit("... connection to " + remoteHost + " closed")
